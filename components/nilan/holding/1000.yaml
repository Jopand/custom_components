text_sensor:
  - platform: modbus_controller
    modbus_controller_id: nilan_modbus_controller
    name: "Aggregate type"
    id: nilan_platform_id
    entity_category: diagnostic
    skip_updates: 60
    register_type: holding
    address: 1000
    lambda: !lambda |-
      uint16_t int_type = (data[item->offset] << 8) + data[item->offset+1];
      ESP_LOGD("main","Parsed aggregate type int : %d", int_type);

      switch (int_type) {
        case 0: return esphome::optional<std::string>("None");
        case 1: return esphome::optional<std::string>("Test");
        case 2: return esphome::optional<std::string>("VPL 10 uden køl");
        case 3: return esphome::optional<std::string>("VPL 15 uden køl");
        case 4: return esphome::optional<std::string>("VPL 15 med køl");
        case 5: return esphome::optional<std::string>("VPL 25 med 3 hastigheder uden køl");
        case 6: return esphome::optional<std::string>("VPL 25 med 3 hastigheder med køl");
        case 7: return esphome::optional<std::string>("VPL 28 2 hastigheder uden køl");
        case 8: return esphome::optional<std::string>("VPL 28 med 2 hastigheder med køl");
        case 9: return esphome::optional<std::string>("VP 18 med kryds monteret oven på anlæg uden køl");
        case 10: return esphome::optional<std::string>("VP 18 med kryds monteret oven på anlæg med køl");
        case 11: return esphome::optional<std::string>("Vp 18 Compact og Compact p uden køl");
        case 12: return esphome::optional<std::string>("VP 18 Compact og Compact P med køl");
        case 13: return esphome::optional<std::string>("Comfort anlæg (Comfort 300 LR)");
        case 14: return esphome::optional<std::string>("CT 150 anlæg med 1-2-3 omskifter");
        case 15: return esphome::optional<std::string>("VLX som kører VAV");
        case 16: return esphome::optional<std::string>("VLX med 2 trin");
        case 17: return esphome::optional<std::string>("VLX med 3 trin");
        case 18: return esphome::optional<std::string>("VP 18 uden køl");
        case 19: return esphome::optional<std::string>("VP 18 med køl");
        case 20: return esphome::optional<std::string>("VP 18 med elkedel uden køl");
        case 21: return esphome::optional<std::string>("VP 18 med elkedel og køl");
        case 22: return esphome::optional<std::string>("VGU 250 brugsvands varmepumpe");
        case 23: return esphome::optional<std::string>("VGU 250 brugsvands varmepumpe med elkedel");
        case 24: return esphome::optional<std::string>("VPL 25 uden køl");
        case 25: return esphome::optional<std::string>("VPL 25 med køl");
        case 26: return esphome::optional<std::string>("VPM 120-560");
        case 27: return esphome::optional<std::string>("Comfort 1200 - 4000");
        case 28: return esphome::optional<std::string>("VP 20 Compact gorona");
        case 29: return esphome::optional<std::string>("VLX med CTS 602 print");
        case 30: return esphome::optional<std::string>("Compact P Nordic");
        case 31: return esphome::optional<std::string>("Comfort Nordic");
        case 32: return esphome::optional<std::string>("VP 18 Version 1");
        case 33: return esphome::optional<std::string>("Combi 300");
        case 34: return esphome::optional<std::string>("Compact med 4-vejsventil uden køl");
        default: return esphome::optional<std::string>("Unknown");
      }
